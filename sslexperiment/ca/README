http://pages.cs.wisc.edu/~zmiller/ca-howto/
http://gagravarr.org/writing/openssl-certs/ca.shtml

===========================================
Certificate Authority key and certificate

Create CA key:
openssl genrsa 2048 > demo-ca.pem

Create CA certificate (valid for 10 years):
openssl req -new -x509 -days 3650 -key demo-ca.pem -out demo-ca.crt


===========================================
Keys for the clients (consoles):

Key for the console1:
openssl genrsa 2048 > console1.pem

Certificate request for console1:
openssl req -new -key console1.pem -out console1.csr

Similarly, keys for servers are created -- just use a different file name

===========================================
Sign a certificate request by the CA
1. Check that the certificate request is valid -- most importantly check the CN (Common name) as this can be used for eventual authorization:
openssl req -in httpfend.csr -noout -text -verify

2. If the certificate request seems OK, sign it. This will produce signed certificate "console1.crt" which is the certificate to be used
for connection by the client.
openssl x509 -req -days 365 -in console1.csr -CA demo-ca.crt -CAkey demo-ca.pem -CAcreateserial -out console1.crt

NOTE: This is the very basic way of signing user certificate by CA. Of course you can use your existing CA toolkit for this.




===========================================
For test purposes create a self-signed key + certificate, which should not be allowed to connect:
openssl genrsa 2048 > selfsigned.pem
openssl req -new -x509 -key selfsigned.pem -out selfsigned.crt
